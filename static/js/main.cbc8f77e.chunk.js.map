{"version":3,"sources":["components/src/img/robot.svg","components/src/img/human.svg","components/minimax.js","components/AppProvider.js","components/sketch.js","components/hintspopup.js","components/hints1.js","components/instructionpopup.js","components/instruction.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TYPES_OF_GAME","ICONS_CHAR","PLAYER_TURNS","getEmptyCells","cells","map","val","idx","filter","item","isMoveLeft","length","winningState","lines","i","a","b","c","position","iconType","isTie","getRandom","start","end","Math","floor","random","replace","index","value","slice","minimax","depth","computerversus","isMax","score","evaluate","best","lengthCells","nextCells","max","min","findBestMove","bestVal","bestMove","moveVal","findRandomMove","emptyCells","AppContext","React","createContext","AppProvider","initState","gameType","currentIcon","playerTurn","Array","fill","gameState","state","changeType","type","initNewGame","humanPlay","newGame","initGame","timeout","clearTimeout","setTimeout","randomMove","computerPlay","setState","applyState","prevState","nextIcon","nextPlayerTurn","makeAIMove","makeHUMANMove","this","Provider","props","children","Component","Cell","Consumer","context","icon","isDoneClass","className","onClick","Board","boardRef","createRef","current","classList","add","remove","ref","contextType","Popup","popupHeader","window","location","reload","style","color","fontSize","refreshPage","Hints1","showPopup","header","togglePopup","bind","text","Inst","GameType","name","MainPage","resetTime","count","timer","setInterval","clearInterval","textInfo","currentIconType","class","src","Human","alt","Robot","componentDidMount","id","href","target","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cbc8f77e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robot.04f4be75.svg\";","module.exports = __webpack_public_path__ + \"static/media/human.855fb65c.svg\";","export const ICONS ={\r\n    O: 0,\r\n    X: 1\r\n}\r\n\r\nexport const TYPES_OF_GAME = {\r\n    HUMAN_PLAYERS: 0,\r\n    VS_COMPUTER : 1\r\n}\r\nexport const ICONS_CHAR=['O', 'X'];\r\n\r\nexport const PLAYER_TURNS = {\r\n    HUMAN : 0,\r\n    COMPUTER: 1\r\n}\r\n\r\nconst getEmptyCells = (cells) => {\r\n    return cells\r\n      .map((val, idx) => [val, idx])\r\n      .filter(item => item[0] === null);\r\n}\r\n\r\nconst isMoveLeft = (cells) => {\r\n    const emptyCells = getEmptyCells(cells);\r\n    return emptyCells.length > 0;\r\n}\r\n\r\nexport const winningState = (cells) => {\r\n    const lines = [\r\n      [0, 1, 2], //1st row\r\n      [3, 4, 5],  //2nd row\r\n      [6, 7, 8], //3rd row\r\n      [0, 3, 6], //1st column\r\n      [1, 4, 7], //2nd column\r\n      [2, 5, 8], //3rd column\r\n      [0, 4, 8], //diagonally\r\n      [2, 4, 6]  //diagonally\r\n    ];\r\n\r\n    let position = \"\";\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n  \r\n      if (cells[a] !== null && cells[a] === cells[b] && cells[a] === cells[c]) {\r\n        if (i >= 0 && i <= 2) position = `h h${i}`;\r\n        else if (i >= 3 && i <= 5) position = `v v${i - 3}`;\r\n        else position = `d${i - 6}`;\r\n  \r\n        return {\r\n          position,\r\n          iconType: cells[a],\r\n          isTie: null\r\n        }\r\n      }\r\n    }\r\n  \r\n    return {\r\n      position: \"\",\r\n      iconType: null,\r\n      isTie: isMoveLeft(cells) ? null : true\r\n    };\r\n  }\r\n\r\n  export const getRandom = (start, end) => {\r\n    return start + Math.floor(Math.random() * (end - start));\r\n  }\r\n  \r\n  export const replace = (cells, index, value) => {\r\n    return [...cells.slice(0, index), value, ...cells.slice(index + 1, cells.length)];\r\n  }\r\n\r\n\r\n\r\n//   * Find best move based on Minimax algorithm\r\n\r\n  const evaluate = (cells, computerversus) => {\r\n    const lines = [\r\n        [0, 1, 2], //1st row\r\n        [3, 4, 5],  //2nd row\r\n        [6, 7, 8], //3rd row\r\n        [0, 3, 6], //1st column\r\n        [1, 4, 7], //2nd column\r\n        [2, 5, 8], //3rd column\r\n        [0, 4, 8], //diagonally\r\n        [2, 4, 6]  //diagonally\r\n      ];\r\n\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n    \r\n        if (cells[a] !== null && cells[a] === cells[b] && cells[a] === cells[c]) {\r\n          if (cells[a] === computerversus) return 10;\r\n          return -10;\r\n        }\r\n      }\r\n    \r\n      return 0;\r\n    }\r\n    \r\n  const minimax = (cells, depth, computerversus, isMax) => {\r\n  const score = evaluate(cells, computerversus);\r\n\r\n  if (score === 10) return score - depth;\r\n\r\n  if (score === -10) return score + depth;\r\n\r\n  if (!isMoveLeft(cells)) return 0;\r\n\r\n  const lengthCells = cells.length;\r\n  let best;\r\n\r\n  if (isMax) {\r\n    best = -1000;\r\n\r\n    for (let i = 0; i < lengthCells; i++) {\r\n      const cell = cells[i];\r\n\r\n      if (cell === null) {\r\n        const nextCells = replace(cells, i, computerversus);\r\n\r\n        best = Math.max(best, minimax(nextCells, depth + 1, computerversus, !isMax));\r\n      }\r\n    }\r\n  } else {\r\n    best = 1000;\r\n\r\n    for (let i = 0; i < lengthCells; i++) {\r\n      const cell = cells[i];\r\n\r\n      if (cell === null) {\r\n        const nextCells = replace(cells, i, 1 - computerversus);\r\n\r\n        best = Math.min(best, minimax(nextCells, depth + 1, computerversus, !isMax));\r\n      }\r\n    }\r\n  }\r\n\r\n  return best;\r\n}\r\n\r\nexport const findBestMove = (cells, computerversus) => {\r\n    let bestVal = -1000;\r\n    let bestMove = null;\r\n  \r\n    const lengthCells = cells.length;\r\n  \r\n    for (let i = 0; i < lengthCells; i++) {\r\n      const cell = cells[i];\r\n  \r\n      if (cell === null) {\r\n        const nextCells = replace(cells, i, computerversus);\r\n  \r\n        const moveVal = minimax(nextCells, 0, computerversus, false);\r\n  \r\n        if (moveVal > bestVal) {\r\n          bestVal = moveVal;\r\n          bestMove = i;\r\n        }\r\n      }\r\n    }\r\n  \r\n    return bestMove;\r\n  }\r\n\r\n\r\n  export const findRandomMove = (cells) => {\r\n    const emptyCells = getEmptyCells(cells);\r\n  \r\n    if (emptyCells.length > 0) {\r\n      const randomNum = getRandom(0, emptyCells.length);\r\n      const index = emptyCells[randomNum][1];\r\n  \r\n      return index;\r\n    }\r\n  \r\n    return null;\r\n  }","import React, { Component } from 'react';\r\nimport {\r\n    TYPES_OF_GAME, PLAYER_TURNS,\r\n    winningState, getRandom, replace,\r\n  findBestMove, findRandomMove\r\n} from './minimax';\r\n\r\nconst THINKING_TIME = 1000;\r\n\r\nexport const AppContext = React.createContext();\r\n\r\nexport default class AppProvider extends Component {\r\n  initState = {\r\n    gameType: TYPES_OF_GAME.HUMAN_PLAYERS,\r\n    currentIcon: getRandom(0, 2),\r\n    playerTurn: getRandom(0, 2),\r\n    cells: new Array(9).fill(null),\r\n    gameState: {\r\n      position: \"\",\r\n      iconType: null,\r\n      isTie: null,\r\n    },\r\n  }\r\n\r\n  state = {\r\n    gameType: this.initState.gameType,\r\n    currentIcon: this.initState.currentIcon,\r\n    playerTurn: this.initState.playerTurn,\r\n    cells: this.initState.cells,\r\n    gameState: this.initState.gameState,\r\n\r\n    changeType: (type) => {\r\n      if (this.state.gameType !== type) {\r\n        this.initNewGame(type);\r\n      }\r\n    },\r\n    humanPlay: (index) => {\r\n      this.humanPlay(index)\r\n    },\r\n    newGame: () => {\r\n      this.initNewGame(this.state.gameType);\r\n    }\r\n  }\r\n\r\n  initGame = () => {\r\n    if (this.state.gameType === TYPES_OF_GAME.VS_COMPUTER &&\r\n      this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\r\n\r\n      if (this.timeout) {\r\n        clearTimeout(this.timeout);\r\n      }\r\n\r\n      this.timeout = setTimeout(() => {\r\n        const randomMove = findRandomMove(this.state.cells);\r\n        this.computerPlay(randomMove);\r\n      }, THINKING_TIME);\r\n    }\r\n  }\r\n\r\n  initNewGame = (type = this.initState.gameType) => {\r\n    this.setState(() => {\r\n      return {\r\n        gameType: type,\r\n        currentIcon: getRandom(0, 2),\r\n        playerTurn: getRandom(0, 2),\r\n        cells: this.initState.cells,\r\n        gameState: this.initState.gameState,\r\n      }\r\n    }, () => {\r\n      this.initGame();\r\n    });\r\n  }\r\n\r\n  applyState = (prevState, index) => {\r\n    const cells = prevState.cells;\r\n    const nextIcon = 1 - prevState.currentIcon;\r\n    const nextPlayerTurn = 1 - prevState.playerTurn;\r\n    const nextCells = replace(cells, index, prevState.currentIcon);\r\n    const gameState = winningState(nextCells);\r\n\r\n    return {\r\n      gameState: gameState,\r\n      currentIcon: nextIcon,\r\n      playerTurn: nextPlayerTurn,\r\n      cells: nextCells\r\n    }\r\n  }\r\n\r\n  humanPlay = (index) => {\r\n    if (this.state.gameState.position === \"\" && this.state.cells[index] === null &&\r\n      (this.state.gameType === TYPES_OF_GAME.HUMAN_PLAYERS || this.state.playerTurn === PLAYER_TURNS.HUMAN)) {\r\n\r\n        \r\n      this.setState(prevState => {\r\n        return this.applyState(prevState, index);\r\n      }, () => {\r\n        // Make a move for computer if the game is in 'versus computer' mode\r\n        if (this.state.gameState.position === \"\" &&\r\n          this.state.gameType === TYPES_OF_GAME.VS_COMPUTER &&\r\n          this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\r\n\r\n          setTimeout(() => {\r\n            this.makeAIMove();\r\n          }, THINKING_TIME);\r\n        }\r\n      });\r\n      \r\n    }\r\n    \r\n  }\r\n\r\n\r\n  \r\n\r\n\r\n  computerPlay = (index) => {\r\n    if (this.state.gameState.position === \"\" && this.state.cells[index] === null &&\r\n      this.state.gameType === TYPES_OF_GAME.VS_COMPUTER &&\r\n      this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\r\n\r\n      this.setState(prevState => {\r\n        return this.applyState(prevState, index);\r\n      },() => {\r\n        if (this.state.gameState.position === \"\" &&\r\n        this.state.gameType === TYPES_OF_GAME.HUMAN_PLAYERS &&\r\n        this.state.playerTurn === PLAYER_TURNS.HUMAN){\r\n\r\n          \r\n          setTimeout(() => {\r\n            this.makeHUMANMove();\r\n          }, THINKING_TIME);\r\n\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  makeAIMove = () => {\r\n    const bestMove = findBestMove(this.state.cells, this.state.currentIcon);\r\n\r\n    if (bestMove !== null) {\r\n      this.computerPlay(bestMove);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initGame();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AppContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </AppContext.Provider>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { AppContext } from './AppProvider';\r\nimport {  ICONS_CHAR } from './minimax';\r\nimport './src/css/sketch.css';\r\nimport './src/css/normal.css'\r\n\r\nconst ICON_PLACE_HOLDDER = 'I';\r\n\r\nconst Cell = (props) => {\r\n  return (\r\n    <AppContext.Consumer>\r\n      {context => {\r\n        const value = context.cells[props.index];\r\n        const icon = value !== null ? ICONS_CHAR[value] : ICON_PLACE_HOLDDER;\r\n        const isDoneClass = icon !== ICON_PLACE_HOLDDER ? 'done' : '';\r\n\r\n        return (\r\n          <button\r\n            className={`cell cell-${props.index} ${isDoneClass}`}\r\n            onClick={() => context.humanPlay(props.index)}>\r\n            {icon}\r\n          </button>\r\n        )\r\n      }}\r\n    </AppContext.Consumer>\r\n  )\r\n}\r\n\r\nexport default class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.boardRef = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.context.gameState.position !== \"\") {\r\n      setTimeout(() => {\r\n        this.boardRef.current.classList.add('full');\r\n      }, 50);\r\n    } else {\r\n      this.boardRef.current.classList.remove('full');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={`boardcontainer ${this.context.gameState.position}`} ref={this.boardRef}>\r\n        <div className=\"boardRow1\">\r\n          <Cell index={0} />\r\n          <Cell index={1} />\r\n          <Cell index={2} />\r\n        </div>\r\n\r\n        <div className=\"boardRow2\">\r\n          <Cell index={3} />\r\n          <Cell index={4} />\r\n          <Cell index={5} />\r\n        </div>\r\n\r\n        <div className=\"boardRow3\">\r\n          <Cell index={6} />\r\n          <Cell index={7} />\r\n          <Cell index={8} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nBoard.contextType = AppContext;","import React, { Component } from 'react'\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './src/css/hints.css'\r\n\r\n\r\nexport default class Popup extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  this.state = {\r\n  \r\n    popupHeader:\"Looks like you don't have an account\"\r\n  };\r\n}\r\n\r\n refreshPage(){ \r\n  window.location.reload(); \r\n}\r\nrender() {\r\n  var headerStyle = {\r\n    color:'white',\r\n    // fontWeight:'bold',\r\n    fontSize: 20\r\n  }\r\n  return (\r\n    \r\n    <div className='popup'>\r\n      <div className='popup_inner'>\r\n     <div style={headerStyle}>\r\n       <div>\r\n       <h4>First Player</h4>\r\n                <li>\r\n                    YOU CHOOSE CORNER\r\n                    <ol>\r\n                        1.Opponent chose nearest edge\r\n                        <ol>\r\n                            Select the non-diagonal corner farthest to the tile opponent chose and then the diagonal corner\r\n                        </ol>\r\n                    </ol>\r\n                    <ol>\r\n                        2.Opponent chose farthest edge\r\n                        <ol>\r\n                        Select any non-diagonal corner and then the usual V strategy - 135 or 139 forms\r\n                        </ol>\r\n                    </ol>\r\n                    <ol>\r\n                        3.Opponent chose diagonal corner\r\n                        <ol>\r\n                        Select any corner and then the other corner\r\n                        </ol>\r\n                    </ol>\r\n                    <ol>\r\n                        4.Opponent chose non-diagonal corner\r\n                        <ol>\r\n                        Select the corner diagonal to the tile opponent chose and then the other corner\r\n                        </ol>\r\n                    </ol>\r\n                    <ol>\r\n                        5.Opponent chose center\r\n                        <ol>\r\n                        Select the diagonally opposite corner. If opponent chooses a corner, select other corner. If the opponent doesn't choose another corner, it will result a tie.\r\n                        </ol>\r\n                    </ol>\r\n                </li>\r\n                <li>\r\n                    YOU CHOOSE CENTER\r\n                    <ol>\r\n                        Opponent chose edge\r\n                        <ol>Select the corner farthest to tile opponent chose</ol>\r\n                    </ol>\r\n                    <ol>\r\n                        Opponent chose corner\r\n                         <ol>Select the corner diagonal to the tile opponent chose.If the opponent chooses another corner, it will result in a TIE. If the opponent doesn't choose another corner, you could select one.</ol>    \r\n                    </ol>\r\n                </li>\r\n                <li>\r\n                    YOU CHOOSE EDGE\r\n                    <ol>No strategies</ol>\r\n                </li>\r\n                <h4>Second Player</h4> \r\n                    <li>\r\n                      OPPONENT CHOOSE CORNER\r\n                       <ol>Select center and obstruct winning chances of opponent</ol>\r\n                    </li>\r\n                    <li>\r\n                    OPPONENT CHOOSE CENTER\r\n                       <ol>Select corner and obstruct winning chances of opponent</ol>\r\n                    </li>\r\n                    <li>\r\n                    OPPONENT CHOOSE EDGE\r\n                       <ol>No strategies</ol>\r\n                    </li>\r\n       </div>\r\n     \r\n        </div>\r\n        <br />\r\n        {/* <button onClick={this.props.closePopup} */}\r\n        <button className=\"closeButton\" onClick={this.props.refreshPage}>CLOSE</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\n\r\n      \r\n    \r\n      \r\n//         <div  onClick={function(){this.setState({open1:!this.state.open1})}.bind(this)}>\r\n//         <div style={{cursor:\"pointer\"}}>INSTRUCTIONS</div>\r\n//         <ul className={this.state.open1? \"panel-collapse\": \"panel-collapse panel-close\"}>\r\n//             <li>\r\n//                 <a href=\"#\">If you are X, your opponent is O. Players take turns putting their marks in empty squares.</a>\r\n//             </li>\r\n//             <li>\r\n//                 <a href=\"#\">The first player to get 3 of their marks in a row (vertical, across, or diagonally) is the winner.</a>\r\n//             </li>\r\n//             <li>\r\n//                 <a href=\"#\">When all 9 squares are full, the game is over. If no player has 3 marks in a row, the game ends in a tie.</a>\r\n//             </li>\r\n//         </ul>\r\n//     </div>\r\n// </ul>\r\n// </div>\r\n//         )\r\n//     }\r\n// }\r\n","import React, { Component } from 'react'\r\nimport Popup from './hintspopup';\r\nimport './src/css/hints.css'\r\n\r\n\r\nexport default class Hints1 extends Component{\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n          showPopup: false,\r\n          header:\"Welcome\"\r\n        };\r\n      }\r\n      togglePopup() {\r\n        this.setState({\r\n          showPopup: !this.state.showPopup\r\n        });\r\n      }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button className=\"hintButton\" onClick={this.togglePopup.bind(this)}>HINTS</button>\r\n       \r\n        \r\n       {this.state.showPopup ? \r\n         <Popup\r\n           text='Popup window text'\r\n           refreshPage={this.togglePopup.bind(this)}\r\n         />\r\n         : null\r\n       }\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './src/css/hints.css'\r\n\r\n\r\nexport default class Popup extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  this.state = {\r\n  \r\n    popupHeader:\"Looks like you don't have an account\"\r\n  };\r\n}\r\n\r\n refreshPage(){ \r\n  window.location.reload(); \r\n}\r\nrender() {\r\n  var headerStyle = {\r\n    color:'white',\r\n    // fontWeight:'bold',\r\n    fontSize: 20\r\n  }\r\n  return (\r\n    \r\n    <div className='popup'>\r\n      <div className='popup_inner'>\r\n     <div style={headerStyle}>\r\n       <div>\r\n       <h4>Instructions here: </h4>\r\n                <li>\r\n                    If you are X, your opponent is O. Players take turns putting their marks in empty squares.\r\n                </li>\r\n                <li>\r\n                The first player to get 3 of their marks in a row (vertical, across, or diagonally) is the winner.\r\n                </li>\r\n                <li>\r\n                When all 9 squares are full, the game is over. If no player has 3 marks in a row, the game ends in a tie.\r\n                </li>\r\n                    \r\n       </div>\r\n     \r\n        </div>\r\n        <br />\r\n        <button className=\"closeButton\" onClick={this.props.refreshPage}>CLOSE</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\n\r\n      \r\n    \r\n      \r\n//         <div  onClick={function(){this.setState({open1:!this.state.open1})}.bind(this)}>\r\n//         <div style={{cursor:\"pointer\"}}>INSTRUCTIONS</div>\r\n//         <ul className={this.state.open1? \"panel-collapse\": \"panel-collapse panel-close\"}>\r\n//             <li>\r\n//                 <a href=\"#\">If you are X, your opponent is O. Players take turns putting their marks in empty squares.</a>\r\n//             </li>\r\n//             <li>\r\n//                 <a href=\"#\">The first player to get 3 of their marks in a row (vertical, across, or diagonally) is the winner.</a>\r\n//             </li>\r\n//             <li>\r\n//                 <a href=\"#\">When all 9 squares are full, the game is over. If no player has 3 marks in a row, the game ends in a tie.</a>\r\n//             </li>\r\n//         </ul>\r\n//     </div>\r\n// </ul>\r\n// </div>\r\n//         )\r\n//     }\r\n// }\r\n","import React, { Component } from 'react'\r\nimport Popup from './instructionpopup';\r\nimport './src/css/hints.css'\r\n\r\n\r\nexport default class Inst extends Component{\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n          showPopup: false,\r\n          header:\"Welcome\"\r\n        };\r\n      }\r\n      togglePopup() {\r\n        this.setState({\r\n          showPopup: !this.state.showPopup\r\n        });\r\n      }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button className=\"instButton\" onClick={this.togglePopup.bind(this)}>INSTRUCTION</button>\r\n       \r\n        \r\n       {this.state.showPopup ? \r\n         <Popup\r\n           text='Popup window text'\r\n           refreshPage={this.togglePopup.bind(this)}\r\n         />\r\n         : null\r\n       }\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { AppContext } from './AppProvider';\r\nimport { TYPES_OF_GAME,  PLAYER_TURNS, ICONS_CHAR} from './minimax';\r\nimport Robot from './src/img/robot.svg'\r\nimport Human from './src/img/human.svg'\r\nimport './src/css/main.css'\r\nimport './src/css/normal.css'\r\nimport Board from './sketch';\r\n// import Hints from './hints';\r\nimport Hints1 from './hints1';\r\nimport Inst from './instruction';\r\n\r\n\r\nconst GameType = (props) => {\r\n    const { value, name } = props;\r\n\r\n    return (\r\n      <AppContext.Consumer>\r\n        {context => (\r\n          <li \r\n            onClick={() => context.changeType(value)} \r\n            className={value === context.gameType ? \"active\" : \"\"}> \r\n            {name} \r\n          </li>\r\n        )}\r\n      </AppContext.Consumer>\r\n    )\r\n  }\r\n\r\nclass MainPage extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      count: 0\r\n    }\r\n  }\r\n\r\n  resetTime = ()=> {\r\n    this.setState({count: 0});\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer= setInterval(() => {\r\n      return this.setState(( state, props) => {\r\n        if(state.count == 10)  clearInterval(this.timer);\r\n        return{\r\n          count : state.count === 10 ? \"TimeOut\" :state.count+ 1\r\n\r\n        }\r\n      })\r\n      \r\n    }, 1000);\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n    let textInfo = '';\r\n    const currentIconType = this.context.currentIcon;\r\n\r\n    if (this.context.gameState.isTie) {\r\n      textInfo = 'Tie!';\r\n    } else {\r\n      if (this.context.gameType === TYPES_OF_GAME.HUMAN_PLAYERS) {\r\n        if (this.context.gameState.position === \"\") {\r\n          textInfo = `It's player(${ICONS_CHAR[currentIconType]}) turn`;\r\n        } else {\r\n          textInfo = `Player(${ICONS_CHAR[1 - currentIconType]}) wins!`;\r\n        }\r\n      } else {\r\n        if (this.context.gameState.position === \"\") {\r\n          if (this.context.playerTurn === PLAYER_TURNS.HUMAN) textInfo = `It's your turn`;\r\n          else textInfo = `It's computer turn`;\r\n        } else {\r\n          if (this.context.playerTurn === PLAYER_TURNS.HUMAN) textInfo = `Computer win!`;\r\n          else textInfo = `You win!`;\r\n        }\r\n      }\r\n    }\r\n    \r\n   \r\n    return (\r\n      <div className=\"container\">\r\n        \r\n      <div className=\"headerDiv\">\r\n        <h1 class = \"headertext\">Tic Tac Toe</h1>\r\n        \r\n         <div className=\"playersDiv\"> \r\n                <div className=\"playersBox\">\r\n                     {/* <Hints /> */}\r\n                     <div className=\"hintandinst\">\r\n                       <Hints1 />\r\n                      <Inst /> </div>\r\n                    <div className=\"playerinnerBox\">\r\n                        <div className=\"humanplayers\">\r\n                            <img src={Human} alt=\"Human\" />\r\n                            <GameType value={TYPES_OF_GAME.HUMAN_PLAYERS} name=\"2 Human-Players\" />\r\n                        </div>\r\n\r\n                        <div  className=\"computerVS\">\r\n                            <img src={Robot} alt=\"ROBOT\" />\r\n                            <GameType value={TYPES_OF_GAME.VS_COMPUTER} name=\"Versus Computer/AI\" />\r\n                        </div>\r\n                    </div>\r\n                  \r\n                </div>\r\n            \r\n                <div className=\"gameBox\">\r\n                  <div className=\"newgameButton\">\r\n                    <button onClick={() => this.context.newGame()}>New Game</button>\r\n                  </div>\r\n                  <br/>\r\n                  <div className=\"newgameTButton\">\r\n                    <button onClick={() => {this.context.newGame(); this.resetTime(); this.componentDidMount()}}>New Game with Timer</button>\r\n                    <p id = \"timer\"> {this.state.count}  </p>\r\n                  </div>\r\n                  <div className=\"info\">{textInfo}</div>\r\n                  <Board />\r\n                </div>\r\n          </div>\r\n          <p>\r\n            <a href=\"https://github.com/N17335H4/ENTERTAIN-THE-CREW.git\" target=\"_blank\">View in Github</a>\r\n          </p> \r\n      </div>\r\n      </div>\r\n\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nMainPage.contextType = AppContext;\r\n\r\nexport default MainPage;\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\nimport MainPage from './components';\nimport AppProvider from './components/AppProvider';\n\n\nclass App extends Component{\n \n\n  render()\n  {\n  return (\n    <AppProvider>\n    <div className=\"app\">\n     <MainPage />\n    </div>\n  </AppProvider>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}